-- Store connections for proper cleanup
local connectionStorage = {} -- Table to store connections for proper cleanup

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local ContextActionService = game:GetService("ContextActionService")

-- Variables
local player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local mouse = player:GetMouse()
local target = nil
local isLocking = false
local isEnabled = false
local lockToHead = false
local espEnabled = false
local lockOnSmoothness = 0.000 -- Set to 0.000 as requested
local lockToNearest = false
local wallCheck = true
local teamCheck = false
local aliveCheck = false -- New variable for alive check
local isDragging = false
local dragStart = nil
local startPos = nil

-- ESP Variables
local espHighlights = {}

-- Function to create rounded corners
function createRoundedCorners(parent, radius)
    local corner = Instance.new("UICorner", parent)
    corner.CornerRadius = radius or UDim.new(0, 0)
    return corner
end

-- UI Setup
local screenGui = Instance.new("ScreenGui", player.PlayerGui)
screenGui.Name = "CameraLockUI"
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Main Frame (Made wider)
local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 600, 0, 250) -- Increased width from 400 to 600
frame.Position = UDim2.new(0.5, -300, -0.3, 0) -- Adjusted position to center
frame.BackgroundColor3 = Color3.fromRGB(240, 240, 247)
frame.BorderSizePixel = 0
frame.ClipsDescendants = true

-- Rounded corners for main frame (only top corners)
local frameCorner = createRoundedCorners(frame, UDim.new(0.04, 0))

-- Title Bar for Dragging
local titleBar = Instance.new("Frame", frame)
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = Color3.fromRGB(230, 230, 235)
titleBar.BorderSizePixel = 0

-- Round only the top corners of the title bar
local titleCorner = createRoundedCorners(titleBar, UDim.new(0.04, 0))

-- Title Text
local titleText = Instance.new("TextLabel", titleBar)
titleText.Size = UDim2.new(0, 200, 0, 30)
titleText.Position = UDim2.new(0, 10, 0, 0)
titleText.Text = "Camera Lock"
titleText.TextColor3 = Color3.fromRGB(80, 80, 80)
titleText.BackgroundTransparency = 1
titleText.Font = Enum.Font.GothamSemibold
titleText.TextSize = 16
titleText.TextXAlignment = Enum.TextXAlignment.Left

-- Find the uiTitleText position (around line 86)
local uiTitleText = Instance.new("TextLabel", frame)
uiTitleText.Size = UDim2.new(0, 200, 0, 30)
uiTitleText.Position = UDim2.new(0.5, -100, 0.85, 0) -- Changed from 0.92 to 0.85 to move it higher
uiTitleText.Text = "SkibidiScripts"
uiTitleText.TextColor3 = Color3.fromRGB(150, 150, 150)
uiTitleText.BackgroundTransparency = 1
uiTitleText.Font = Enum.Font.GothamMedium
uiTitleText.TextSize = 18

-- Control Buttons (Top Right)
local closeButton = Instance.new("TextButton", titleBar)
closeButton.Size = UDim2.new(0, 15, 0, 15)
closeButton.Position = UDim2.new(0.97, -10, 0.5, -7.5)
closeButton.Text = ""
closeButton.BackgroundColor3 = Color3.fromRGB(255, 95, 90)
closeButton.BorderSizePixel = 0
closeButton.AutoButtonColor = false

local minimizeButton = Instance.new("TextButton", titleBar)
minimizeButton.Size = UDim2.new(0, 15, 0, 15)
minimizeButton.Position = UDim2.new(0.90, -10, 0.5, -7.5)
minimizeButton.Text = ""
minimizeButton.BackgroundColor3 = Color3.fromRGB(255, 189, 68)
minimizeButton.BorderSizePixel = 0
minimizeButton.AutoButtonColor = false

-- Rounded corners for buttons
createRoundedCorners(closeButton, UDim.new(1, 0))
createRoundedCorners(minimizeButton, UDim.new(1, 0))

-- Reorganized Toggles List - Left and Right columns
local leftToggles = {
    {name = "Lock to Torso", pos = 0.25, var = "isEnabled"},
    {name = "Lock to Head", pos = 0.50, var = "lockToHead"},
    {name = "ESP", pos = 0.75, var = "espEnabled"},
}

local rightToggles = {
    {name = "Wall Check", pos = 0.25, var = "wallCheck"},
    {name = "Lock to Nearest", pos = 0.50, var = "lockToNearest"},
    {name = "Team Check", pos = 0.75, var = "teamCheck"}
}

-- Add Alive Check Toggle (new)
local bottomToggles = {
    {name = "Alive Check", pos = 0.5, var = "aliveCheck"},
}

-- Create Left Toggles
for _, toggleData in pairs(leftToggles) do
    local yPos = toggleData.pos
    
    -- Toggle Background
    local toggleBG = Instance.new("Frame", frame)
    toggleBG.Size = UDim2.new(0, 54, 0, 28)
    toggleBG.Position = UDim2.new(0.12, 0, yPos, 0)
    toggleBG.BackgroundColor3 = Color3.fromRGB(220, 220, 225)
    toggleBG.BorderSizePixel = 0
    
    -- Toggle Button
    local toggleBtn = Instance.new("TextButton", toggleBG)
    toggleBtn.Size = UDim2.new(0, 26, 0, 26)
    toggleBtn.Position = UDim2.new(0, 1, 0.5, -13)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleBtn.Text = ""
    toggleBtn.BorderSizePixel = 0
    toggleBtn.AutoButtonColor = false
    
    -- Label
    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(0, 200, 0, 20)
    label.Position = UDim2.new(0.22, 0, yPos, 4)
    label.Text = toggleData.name
    label.TextColor3 = Color3.fromRGB(80, 80, 80)
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamMedium
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Store references
    toggleData.bg = toggleBG
    toggleData.btn = toggleBtn
    
    -- Apply rounded corners
    createRoundedCorners(toggleBG, UDim.new(1, 0))
    createRoundedCorners(toggleBtn, UDim.new(1, 0))
end

-- Create Right Toggles
for _, toggleData in pairs(rightToggles) do
    local yPos = toggleData.pos
    
    -- Toggle Background
    local toggleBG = Instance.new("Frame", frame)
    toggleBG.Size = UDim2.new(0, 54, 0, 28)
    toggleBG.Position = UDim2.new(0.62, 0, yPos, 0) -- Positioned on the right side
    toggleBG.BackgroundColor3 = Color3.fromRGB(220, 220, 225)
    toggleBG.BorderSizePixel = 0
    
    -- Toggle Button
    local toggleBtn = Instance.new("TextButton", toggleBG)
    toggleBtn.Size = UDim2.new(0, 26, 0, 26)
    toggleBtn.Position = UDim2.new(0, 1, 0.5, -13)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleBtn.Text = ""
    toggleBtn.BorderSizePixel = 0
    toggleBtn.AutoButtonColor = false
    
    -- Label
    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(0, 200, 0, 20)
    label.Position = UDim2.new(0.72, 0, yPos, 4)
    label.Text = toggleData.name
    label.TextColor3 = Color3.fromRGB(80, 80, 80)
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamMedium
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Store references
    toggleData.bg = toggleBG
    toggleData.btn = toggleBtn
    
    -- Apply rounded corners
    createRoundedCorners(toggleBG, UDim.new(1, 0))
    createRoundedCorners(toggleBtn, UDim.new(1, 0))
end

-- Create Bottom Toggles (Alive Check)
for _, toggleData in pairs(bottomToggles) do
    -- Toggle Background
    local toggleBG = Instance.new("Frame", frame)
    toggleBG.Size = UDim2.new(0, 54, 0, 28)
    toggleBG.Position = UDim2.new(0.37, 0, 0.9, -30) -- Position at bottom center
    toggleBG.BackgroundColor3 = Color3.fromRGB(220, 220, 225)
    toggleBG.BorderSizePixel = 0
    
    -- Toggle Button
    local toggleBtn = Instance.new("TextButton", toggleBG)
    toggleBtn.Size = UDim2.new(0, 26, 0, 26)
    toggleBtn.Position = UDim2.new(0, 1, 0.5, -13)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleBtn.Text = ""
    toggleBtn.BorderSizePixel = 0
    toggleBtn.AutoButtonColor = false
    
    -- Label
    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(0, 200, 0, 20)
    label.Position = UDim2.new(0.47, 0, 0.9, -26)
    label.Text = toggleData.name
    label.TextColor3 = Color3.fromRGB(80, 80, 80)
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamMedium
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Store references
    toggleData.bg = toggleBG
    toggleData.btn = toggleBtn
    
    -- Apply rounded corners
    createRoundedCorners(toggleBG, UDim.new(1, 0))
    createRoundedCorners(toggleBtn, UDim.new(1, 0))
end

-- Toggle Animation Function
local function animateToggle(toggleBtn, toggleBG, state)
    TweenService:Create(toggleBtn, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
        Position = state and UDim2.new(1, -27, 0.5, -13) or UDim2.new(0, 1, 0.5, -13)
    }):Play()
    
    TweenService:Create(toggleBG, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
        BackgroundColor3 = state and Color3.fromRGB(0, 122, 255) or Color3.fromRGB(220, 220, 225)
    }):Play()
end

-- Initialize Toggles with _G variables
local allToggles = {}
for _, v in pairs(leftToggles) do table.insert(allToggles, v) end
for _, v in pairs(rightToggles) do table.insert(allToggles, v) end
for _, v in pairs(bottomToggles) do table.insert(allToggles, v) end

for _, toggleData in pairs(allToggles) do
    _G[toggleData.var] = false -- Initialize all variables in _G table
    
    -- Store toggle connections in connectionStorage
    local toggleConn = toggleData.btn.MouseButton1Click:Connect(function()
        _G[toggleData.var] = not _G[toggleData.var]
        animateToggle(toggleData.btn, toggleData.bg, _G[toggleData.var])
        
        -- Handle ESP immediately
        if toggleData.var == "espEnabled" then
            updateESP()
        end
    end)
    
    table.insert(connectionStorage, toggleConn)
end

-- NEW PURPLE GLOW ESP FUNCTION
function updateESP()
    -- Clear existing ESP
    for _, highlight in pairs(espHighlights) do
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
    end
    espHighlights = {}

    if _G.espEnabled then
        for _, otherPlayer in pairs(Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Character then
                local character = otherPlayer.Character
                local humanoid = character:FindFirstChildOfClass("Humanoid")

                -- Skip players who aren't alive if alive check is enabled
                if _G.aliveCheck and (not humanoid or humanoid.Health <= 0) then
                    continue
                end

                if humanoid and humanoid.Health > 0 then
                    -- Skip team check if enabled
                    if _G.teamCheck and not isEnemy(otherPlayer) then
                        continue
                    end
                    
                    -- Create Highlight effect for the entire character
                    local highlight = Instance.new("Highlight")
                    highlight.FillColor = Color3.fromRGB(128, 0, 255) -- Purple color
                    highlight.OutlineColor = Color3.fromRGB(200, 0, 255) -- Brighter purple for outline
                    highlight.FillTransparency = 0.3 -- Semi-transparent fill
                    highlight.OutlineTransparency = 0.1 -- More visible outline
                    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop -- Show through walls
                    highlight.Adornee = character
                    highlight.Parent = screenGui
                    
                    table.insert(espHighlights, highlight)
                    
                    -- Create health label above player
                    local healthLabel = Instance.new("BillboardGui")
                    healthLabel.Size = UDim2.new(0, 100, 0, 40)
                    healthLabel.StudsOffset = Vector3.new(0, 3, 0)
                    healthLabel.Adornee = character:FindFirstChild("Head")
                    healthLabel.AlwaysOnTop = true
                    healthLabel.Parent = screenGui
                    
                    local healthText = Instance.new("TextLabel", healthLabel)
                    healthText.Size = UDim2.new(1, 0, 1, 0)
                    healthText.BackgroundTransparency = 1
                    healthText.Text = otherPlayer.Name .. "\nHP: " .. math.floor(humanoid.Health)
                    healthText.TextColor3 = Color3.fromRGB(255, 255, 255)
                    healthText.TextStrokeTransparency = 0.5
                    healthText.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                    healthText.Font = Enum.Font.GothamBold
                    healthText.TextSize = 14
                    
                    table.insert(espHighlights, healthLabel)
                    
                    -- Update health text when health changes
                    local healthConn = humanoid.HealthChanged:Connect(function()
                        if healthText and healthText.Parent then
                            healthText.Text = otherPlayer.Name .. "\nHP: " .. math.floor(humanoid.Health)
                            
                            -- If alive check is enabled and player dies, remove ESP
                            if _G.aliveCheck and humanoid.Health <= 0 then
                                if highlight and highlight.Parent then
                                    highlight:Destroy()
                                end
                                if healthLabel and healthLabel.Parent then
                                    healthLabel:Destroy()
                                end
                            end
                        end
                    end)
                    
                    -- Add connection to connectionStorage
                    table.insert(connectionStorage, healthConn)
                end
            end
        end
    end
end

-- Wall Check Function
function isVisible(targetPart)
    if not _G.wallCheck then return true end
    
    local origin = camera.CFrame.Position
    local direction = (targetPart.Position - origin).Unit
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {player.Character}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    
    local result = workspace:Raycast(origin, direction * 1000, rayParams)
    return result and result.Instance:IsDescendantOf(targetPart.Parent)
end

-- Team Check Function with automatic refresh
function isEnemy(targetPlayer)
    if not _G.teamCheck then return true end
    return targetPlayer.Team ~= player.Team
end

-- Check if player is alive
function isAlive(character)
    if not _G.aliveCheck then return true end
    if not character then return false end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    return humanoid and humanoid.Health > 0
end

-- Monitor player team changes
local playerTeamConn = player:GetPropertyChangedSignal("Team"):Connect(function()
    if _G.espEnabled and _G.teamCheck then
        updateESP()
    end
end)
table.insert(connectionStorage, playerTeamConn)

-- Check for other players' team changes
for _, otherPlayer in pairs(Players:GetPlayers()) do
    if otherPlayer ~= player then
        local otherTeamConn = otherPlayer:GetPropertyChangedSignal("Team"):Connect(function()
            if _G.espEnabled and _G.teamCheck then
                updateESP()
            end
        end)
        table.insert(connectionStorage, otherTeamConn)
    end
end

-- Monitor player health changes for Alive Check
for _, otherPlayer in pairs(Players:GetPlayers()) do
    if otherPlayer ~= player then
        local charConn = otherPlayer.CharacterAdded:Connect(function(character)
            if _G.espEnabled then
                updateESP()
            end
            
            local humanoid = character:WaitForChild("Humanoid", 10)
            if humanoid then
                local healthConn = humanoid.HealthChanged:Connect(function()
                    if _G.espEnabled and _G.aliveCheck then
                        updateESP()
                    end
                end)
                table.insert(connectionStorage, healthConn)
            end
        end)
        table.insert(connectionStorage, charConn)
    end
end

-- Also monitor for new players and set up team change detection
local playerAddedConn = Players.PlayerAdded:Connect(function(newPlayer)
    local newPlayerTeamConn = newPlayer:GetPropertyChangedSignal("Team"):Connect(function()
        if _G.espEnabled and _G.teamCheck then
            updateESP()
        end
    end)
    table.insert(connectionStorage, newPlayerTeamConn)
    
    -- Add character added/health monitoring for new players
    local charConn = newPlayer.CharacterAdded:Connect(function(character)
        if _G.espEnabled then
            updateESP()
        end
        
        local humanoid = character:WaitForChild("Humanoid", 10)
        if humanoid then
            local healthConn = humanoid.HealthChanged:Connect(function()
                if _G.espEnabled and _G.aliveCheck then
                    updateESP()
                end
            end)
            table.insert(connectionStorage, healthConn)
        end
    end)
    table.insert(connectionStorage, charConn)
end)
table.insert(connectionStorage, playerAddedConn)

-- Modified Lock-on Logic to properly use nearest distance in 3D space
function findTarget()
    local nearest = nil
    local minDist = math.huge

    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and isEnemy(otherPlayer) then
            local character = otherPlayer.Character
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            
            -- Skip if not alive and alive check is enabled
            if not isAlive(character) then 
                continue 
            end
            
            if humanoid and humanoid.Health > 0 then
                local targetPart = _G.lockToHead and character:FindFirstChild("Head") 
                               or character:FindFirstChild("HumanoidRootPart")

                if targetPart and isVisible(targetPart) then
                    local screenPos, onScreen = camera:WorldToScreenPoint(targetPart.Position)
                    
                    if onScreen then
                        -- For "Lock to Nearest" we'll use actual 3D distance
                        local actualDistance = (targetPart.Position - camera.CFrame.Position).Magnitude
                        
                        -- For non-nearest mode, use screen distance with a threshold
                        local mousePos = Vector2.new(mouse.X, mouse.Y)
                        local screenDistance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                        
                        if _G.lockToNearest then
                            -- When Lock to Nearest is enabled, prioritize by actual distance
                            if actualDistance < minDist then
                                minDist = actualDistance
                                nearest = character
                            end
                        else
                            -- Normal mode - lock only if cursor is close enough
                            if screenDistance < 150 and screenDistance < minDist then
                                minDist = screenDistance
                                nearest = character
                            end
                        end
                    end
                end
            end
        end
    end
    return nearest
end

-- Camera Lock Function (with a wrapper for catching errors)
local lockCameraActive = false
function lockCamera()
    if lockCameraActive then return end
    lockCameraActive = true
    
    local cameraLockLoop
    cameraLockLoop = RunService.RenderStepped:Connect(function()
        if not isLocking or not _G.isEnabled then
            cameraLockLoop:Disconnect()
            lockCameraActive = false
            return
        end
        
        local targetCharacter = findTarget()
        if targetCharacter then
            local targetPart = _G.lockToHead and targetCharacter:FindFirstChild("Head") 
                           or targetCharacter:FindFirstChild("HumanoidRootPart")
            
            if targetPart then
                local newCFrame = CFrame.new(camera.CFrame.Position, targetPart.Position)
                -- Only tween if there's a significant difference
                if (camera.CFrame.LookVector - newCFrame.LookVector).Magnitude > 0.01 then
                    TweenService:Create(camera, TweenInfo.new(lockOnSmoothness), {CFrame = newCFrame}):Play()
                else
                    camera.CFrame = newCFrame
                end
            end
        end
    end)
    
    -- Add to connection storage for cleanup
    table.insert(connectionStorage, cameraLockLoop)
end

-- Fixed Input Handling for UI toggling
local isUIMinimized = false -- Track UI state

local inputBeganConn = UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 and _G.isEnabled then
        isLocking = true
        lockCamera()
    elseif input.KeyCode == Enum.KeyCode.RightAlt then
        -- Toggle UI visibility
        if isUIMinimized then
            -- Show UI if it was minimized
            TweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), 
                {Position = UDim2.new(0.5, -300, 0.05, 0)}):Play()
            isUIMinimized = false
        else
            -- Hide UI if it was visible
            TweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In), 
                {Position = UDim2.new(0.5, -300, -0.5, 0)}):Play()
            isUIMinimized = true
            showNotification("UI minimized - Press Right Alt to reopen")
        end
    end
end)
table.insert(connectionStorage, inputBeganConn)

local inputEndedConn = UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        isLocking = false
    end
end)
table.insert(connectionStorage, inputEndedConn)

-- Make UI Draggable
local titleBarInputBeganConn = titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isDragging = true
        dragStart = input.Position
        startPos = frame.Position
    end
end)
table.insert(connectionStorage, titleBarInputBeganConn)

local titleBarInputEndedConn = titleBar.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isDragging = false
    end
end)
table.insert(connectionStorage, titleBarInputEndedConn)

local inputChangedConn = UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and isDragging then
        local delta = input.Position - dragStart
        TweenService:Create(frame, TweenInfo.new(0.1), {
            Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X, 
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        }):Play()
    end
end)
table.insert(connectionStorage, inputChangedConn)

-- UI Controls
local minimizeButtonConn = minimizeButton.MouseButton1Click:Connect(function()
    -- Set UI state to minimized
    isUIMinimized = true
    
    -- Hide UI
    TweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In), 
        {Position = UDim2.new(0.5, -300, -0.5, 0)}):Play()
    showNotification("UI minimized - Press Right Alt to reopen")
end)
table.insert(connectionStorage, minimizeButtonConn)

-- FIXED closeButton.MouseButton1Click connection to ensure full cleanup
local closeButtonConn = closeButton.MouseButton1Click:Connect(function()
    -- First disconnect all connections to prevent any further updates
    for _, connection in pairs(connectionStorage) do
        if typeof(connection) == "RBXScriptConnection" and connection.Connected then 
            connection:Disconnect() 
        end
    end
    connectionStorage = {}
    
    -- Disable all features
    isLocking = false
    _G.isEnabled = false
    _G.lockToHead = false
    _G.espEnabled = false
    _G.wallCheck = false
    _G.lockToNearest = false
    _G.teamCheck = false
    _G.aliveCheck = false
    
    -- Clean up ESP
    for _, highlight in pairs(espHighlights) do
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
    end
    espHighlights = {}
    
    -- Remove context actions
    ContextActionService:UnbindAction("CameraLock")
    
    -- Show unload notification
    showNotification("Camera Lock unloaded successfully")
    
    -- Force destroy the screenGui without relying on animation completion
    spawn(function()
        wait(0.5) -- Small delay to allow notification to be seen
        if screenGui and screenGui.Parent then
            screenGui:Destroy()
        end
    end)
end)
table.insert(connectionStorage, closeButtonConn)

-- Enhanced Notification System with transparent white background
function showNotification(message)
    local notification = Instance.new("Frame", screenGui)
    notification.Size = UDim2.new(0, 240, 0, 40)
    notification.Position = UDim2.new(0.5, -120, 0.9, 0)
    notification.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- White background
    notification.BackgroundTransparency = 0.6 -- More transparent (60%)
    notification.BorderSizePixel = 0
    
    createRoundedCorners(notification, UDim.new(0.2, 0))

    local textLabel = Instance.new("TextLabel", notification)
    textLabel.Size = UDim2.new(1, -20, 1, 0)
    textLabel.Position = UDim2.new(0, 10, 0, 0)
    textLabel.Text = message
    textLabel.TextColor3 = Color3.fromRGB(50, 50, 50) -- Darker text for better contrast on white
    textLabel.BackgroundTransparency = 1
    textLabel.Font = Enum.Font.GothamMedium
    textLabel.TextSize = 14
    textLabel.TextWrapped = true

    -- Animate notification (slide up and fade)
    notification.Position = UDim2.new(0.5, -120, 1.1, 0)
    local notifTween = TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), 
 {Position = UDim2.new(0.5, -120, 0.9, 0)}):Play()
    
    -- Destroy notification after delay
    spawn(function()
        wait(3)
        TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quad), 
            {Position = UDim2.new(0.5, -120, 1.1, 0), BackgroundTransparency = 1}):Play()
        wait(0.5)
        notification:Destroy()
    end)
end

-- Initial animation for UI
frame.Position = UDim2.new(0.5, -300, -0.5, 0)
TweenService:Create(frame, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out), 
    {Position = UDim2.new(0.5, -300, 0.05, 0)}):Play()

-- Player added event for ESP updates
local playerAddedForESP = Players.PlayerAdded:Connect(function()
    if _G.espEnabled then
        updateESP()
    end
end)
table.insert(connectionStorage, playerAddedForESP)

-- Display initial notification
showNotification("Camera Lock loaded! Press Right Alt to toggle UI")

-- Return cleanup function
return function()
    for _, connection in pairs(connectionStorage) do
        if typeof(connection) == "RBXScriptConnection" and connection.Connected then 
            connection:Disconnect() 
        end
    end
    if screenGui and screenGui.Parent then
        screenGui:Destroy()
    end
end
